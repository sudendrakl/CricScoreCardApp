apply plugin: 'com.android.application'

def versionMajor = 0
def versionMinor = 0
def versionPatch = 1

def buildNumber = gitVersion()//System.getenv("BUILD_NUMBER") as Integer ?: getDate()
//
//def getDate() {
//    def date = new Date()
//    def formattedDate = date.format('yyyyMMdd')
//    return formattedDate
//}

def gitVersion() {
    def process = "git rev-list HEAD --first-parent --count".execute()
    return process.text.toInteger()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.blackbeard.cricapp"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode gitVersion()
        versionName "${versionMajor}.${versionMinor}.${versionPatch}-${buildNumber}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            //TODO
            storeFile file("blackbeard-cricapp-keystore.jks")
            storePassword "blackBeardCricApp"
            keyAlias "blackBeardKeystore"
            keyPassword "blackBeardCricApp"
        }
        debug {
            //TODO
            storeFile file("debug-keystore")
            storePassword "android"
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles 'proguard-android.txt', 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix "-release"
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            versionNameSuffix "-debug"
        }
    }

    productFlavors {
        stage {
            applicationId "com.blackbeard.cricapp.debug"
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-${buildNumber}-debug"
        }

        prod {
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-${buildNumber}-prod"
        }
    }

//    sourceSets {
//        prod {
//            java.srcDirs = ['src/prod/java']
//        }
//
//        stage {
//            java.srcDirs = ['src/stage/java']
//        }
//    }

    lintOptions {
        disable 'InvalidPackage' //for Butterknife injection
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }




}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
    compile 'com.google.firebase:firebase-core:9.2.1'
    compile 'com.google.firebase:firebase-database:9.2.1'
    compile 'com.google.firebase:firebase-storage:9.2.1'
    compile 'com.google.firebase:firebase-crash:9.2.1'
    compile 'com.google.firebase:firebase-messaging:9.2.1'

    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support:support-annotations:23.4.0'
}


// change this to whatever your app's name is...
project.archivesBaseName = 'CricScoreCard'

project.android.applicationVariants.all { variant -> renameApk(variant)
}

def renameApk(variant) {
    def apkPath = variant.outputs[0].outputFile.parent
    def baseName = project.archivesBaseName

    // add version name and version code
    baseName += "-v${variant.mergedFlavor.versionName}"

    // if it's a release build, the type is implicit, imo, so add it otherwise
    //  if (variant.name != 'release') {
    //    baseName += "-${variant.buildType.name}"
    //  }

    // if the variant will not be zipAligned, specify that
    if (!variant.outputs[0].zipAlign) {
        baseName += '-unaligned'
    }
    /*  from(variant.outputFile.path) {
      rename '.*', "${baseName}.apk"
    }*/
    // set the output file
    variant.outputs[0].outputFile = new File(apkPath, "${baseName}.apk");
}

apply plugin: 'com.google.gms.google-services'
